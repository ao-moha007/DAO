{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.18\"},\"sources\":{\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract DAO {\\r\\n    IERC20 public votingToken;\\r\\n\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        address creator;\\r\\n        string description;\\r\\n        uint256 voteCount;\\r\\n        uint256 voteEndTime;\\r\\n        bool executed;\\r\\n        address targetContract;\\r\\n        bytes callData;\\r\\n        mapping(address => bool) voted;\\r\\n    }\\r\\n\\r\\n    uint256 public proposalCount;\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n    mapping(address => address) public voteDelegation; // Delegated votes\\r\\n\\r\\n    uint256 public quorum = 10 * 10**18; // 10 tokens minimum\\r\\n    uint256 public votingPeriod = 2 minutes;\\r\\n\\r\\n    event ProposalCreated(\\r\\n        uint256 proposalId,\\r\\n        address creator,\\r\\n        string description\\r\\n    );\\r\\n    event Voted(address voter, uint256 proposalId);\\r\\n    event VoteDelegated(address delegator, address delegatee);\\r\\n    event ProposalExecuted(uint256 proposalId);\\r\\n    event ExecutionFailure(uint256 proposalId, string errorMessage);\\r\\n    constructor(IERC20 _votingToken) {\\r\\n        votingToken = _votingToken;\\r\\n    }\\r\\n\\r\\n    modifier onlyTokenHolders() {\\r\\n        require(votingToken.balanceOf(msg.sender) > 0, \\\"Not a token holder\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // **1. Create Proposal**\\r\\n    function createProposal(\\r\\n        string memory _description,\\r\\n        address _targetContract,\\r\\n        bytes memory _callData\\r\\n    ) external onlyTokenHolders {\\r\\n        uint256 proposalId = proposalCount++;\\r\\n        Proposal storage newProposal = proposals[proposalId];\\r\\n        newProposal.id = proposalId;\\r\\n        newProposal.creator = msg.sender;\\r\\n        newProposal.description = _description;\\r\\n        newProposal.voteEndTime = block.timestamp + votingPeriod;\\r\\n        newProposal.targetContract = _targetContract;\\r\\n        newProposal.callData = _callData;\\r\\n\\r\\n        emit ProposalCreated(proposalId, msg.sender, _description);\\r\\n    }\\r\\n\\r\\n    // **2. Delegate Vote**\\r\\n    function delegateVote(address _delegatee) external onlyTokenHolders {\\r\\n        require(_delegatee != msg.sender, \\\"Cannot delegate to self\\\");\\r\\n        voteDelegation[msg.sender] = _delegatee;\\r\\n        emit VoteDelegated(msg.sender, _delegatee);\\r\\n    }\\r\\n\\r\\n    // **3. Vote on Proposal**\\r\\n    function vote(uint256 _proposalId) external onlyTokenHolders {\\r\\n        Proposal storage proposal = proposals[_proposalId];\\r\\n\\r\\n        require(block.timestamp < proposal.voteEndTime, \\\"Voting period ended\\\");\\r\\n        require(!proposal.voted[msg.sender], \\\"Already voted\\\");\\r\\n\\r\\n        // Get voting power (includes delegated votes)\\r\\n        uint256 voterTokens = votingToken.balanceOf(msg.sender);\\r\\n        address delegatee = voteDelegation[msg.sender];\\r\\n        if (delegatee != address(0)) {\\r\\n            voterTokens += votingToken.balanceOf(delegatee);\\r\\n        }\\r\\n\\r\\n        require(voterTokens > 0, \\\"No voting power\\\");\\r\\n\\r\\n        proposal.voteCount += voterTokens;\\r\\n        proposal.voted[msg.sender] = true;\\r\\n\\r\\n        emit Voted(msg.sender, _proposalId);\\r\\n    }\\r\\n\\r\\n    // **4. Execute Proposal**\\r\\n    function executeProposal(uint256 _proposalId) external {\\r\\n        Proposal storage proposal = proposals[_proposalId];\\r\\n\\r\\n        // Check if the voting period has ended\\r\\n        require(\\r\\n            block.timestamp >= proposal.voteEndTime,\\r\\n            \\\"Voting period not ended\\\"\\r\\n        );\\r\\n        require(!proposal.executed, \\\"Already executed\\\");\\r\\n\\r\\n        // Check if quorum is met\\r\\n        require(proposal.voteCount >= quorum, \\\"Not enough votes\\\");\\r\\n\\r\\n        proposal.executed = true;\\r\\n\\r\\n        // Emit event for debugging\\r\\n        emit ProposalExecuted(_proposalId);\\r\\n\\r\\n        // Attempt to execute the proposal\\r\\n        (bool success, bytes memory returndata) = proposal.targetContract.call(\\r\\n            proposal.callData\\r\\n        );\\r\\n        if (!success) {\\r\\n            // If the call failed, revert with the error message\\r\\n            string memory errorMessage = _getRevertReason(returndata);\\r\\n            emit ExecutionFailure(_proposalId, errorMessage);\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getRevertReason(bytes memory returndata)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (returndata.length < 68) return \\\"Transaction reverted silently\\\";\\r\\n        assembly {\\r\\n            returndata := add(returndata, 0x04)\\r\\n        }\\r\\n        return abi.decode(returndata, (string));\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.18\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0xb82FC520095aC8Faf67c1c027e2e45d5BFe3804B","bytecode":"0x6080604052678ac7230489e80000600455607860055534801561002157600080fd5b5060405161118738038061118783398101604081905261004091610065565b600080546001600160a01b0319166001600160a01b0392909216919091179055610095565b60006020828403121561007757600080fd5b81516001600160a01b038116811461008e57600080fd5b9392505050565b6110e3806100a46000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80632821ff26116100665780632821ff261461011b5780636986e3291461012e578063b03401231461016f578063b31e1d4d14610182578063da35c6641461019557600080fd5b80630121b93f146100a3578063013cf08b146100b857806302a251a3146100e85780630d61b519146100ff5780631703a01814610112575b600080fd5b6100b66100b1366004610b33565b61019e565b005b6100cb6100c6366004610b33565b61049a565b6040516100df989796959493929190610b9c565b60405180910390f35b6100f160055481565b6040519081526020016100df565b6100b661010d366004610b33565b610607565b6100f160045481565b6100b6610129366004610cd1565b61082a565b61015761013c366004610d70565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100df565b600054610157906001600160a01b031681565b6100b6610190366004610d70565b610986565b6100f160015481565b600080546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156101e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020b9190610d92565b116102315760405162461bcd60e51b815260040161022890610dab565b60405180910390fd5b6000818152600260205260409020600481015442106102885760405162461bcd60e51b8152602060048201526013602482015272159bdd1a5b99c81c195c9a5bd908195b991959606a1b6044820152606401610228565b33600090815260078201602052604090205460ff16156102da5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b6044820152606401610228565b600080546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103479190610d92565b336000908152600360205260409020549091506001600160a01b031680156103e4576000546040516370a0823160e01b81526001600160a01b038381166004830152909116906370a0823190602401602060405180830381865afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d79190610d92565b6103e19083610ded565b91505b600082116104265760405162461bcd60e51b815260206004820152600f60248201526e2737903b37ba34b733903837bbb2b960891b6044820152606401610228565b8183600301600082825461043a9190610ded565b9091555050336000818152600785016020908152604091829020805460ff19166001179055815192835282018690527f4d99b957a2bc29a30ebd96a7be8e68fe50a3c701db28a91436490b7d53870ca4910160405180910390a150505050565b600260208190526000918252604090912080546001820154928201805491936001600160a01b031692916104cd90610e00565b80601f01602080910402602001604051908101604052809291908181526020018280546104f990610e00565b80156105465780601f1061051b57610100808354040283529160200191610546565b820191906000526020600020905b81548152906001019060200180831161052957829003601f168201915b505050506003830154600484015460058501546006860180549596939592945060ff8216936101009092046001600160a01b03169261058490610e00565b80601f01602080910402602001604051908101604052809291908181526020018280546105b090610e00565b80156105fd5780601f106105d2576101008083540402835291602001916105fd565b820191906000526020600020905b8154815290600101906020018083116105e057829003601f168201915b5050505050905088565b600081815260026020526040902060048101544210156106695760405162461bcd60e51b815260206004820152601760248201527f566f74696e6720706572696f64206e6f7420656e6465640000000000000000006044820152606401610228565b600581015460ff16156106b15760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b6044820152606401610228565b600454816003015410156106fa5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f75676820766f74657360801b6044820152606401610228565b60058101805460ff191660011790556040517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f9061073b9084815260200190565b60405180910390a16000808260050160019054906101000a90046001600160a01b03166001600160a01b0316836006016040516107789190610e3a565b6000604051808303816000865af19150503d80600081146107b5576040519150601f19603f3d011682016040523d82523d6000602084013e6107ba565b606091505b5091509150816108245760006107cf82610ace565b90507ff46b9a37318f375b6612b0522f04ac289129cafb279d379fa487be62a147477c8582604051610802929190610eb0565b60405180910390a18060405162461bcd60e51b81526004016102289190610ed1565b50505050565b600080546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610873573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108979190610d92565b116108b45760405162461bcd60e51b815260040161022890610dab565b60018054600091826108c583610ee4565b9091555060008181526002602081905260409091208281556001810180546001600160a01b0319163317905591925081016109008682610f4c565b5060055461090e9042610ded565b6004820155600581018054610100600160a81b0319166101006001600160a01b03871602179055600681016109438482610f4c565b507f7585f467599d0f008985f231af99293be388626ac16ca59505c2f8f88969cd638233876040516109779392919061100c565b60405180910390a15050505050565b600080546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156109cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f39190610d92565b11610a105760405162461bcd60e51b815260040161022890610dab565b336001600160a01b03821603610a685760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f742064656c656761746520746f2073656c660000000000000000006044820152606401610228565b3360008181526003602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251938452908301527fa0ff2fa6909fe4ddd94349fc9d8e2932f3dfe666216f3cc2aa3a72f5a03b655e910160405180910390a150565b6060604482511015610b1357505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b60048201915081806020019051810190610b2d919061103f565b92915050565b600060208284031215610b4557600080fd5b5035919050565b60005b83811015610b67578181015183820152602001610b4f565b50506000910152565b60008151808452610b88816020860160208601610b4c565b601f01601f19169290920160200192915050565b8881526001600160a01b03888116602083015261010060408301819052600091610bc88483018b610b70565b915088606085015287608085015286151560a085015280861660c08501525082810360e0840152610bf98185610b70565b9b9a5050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610c4757610c47610c08565b604052919050565b600067ffffffffffffffff821115610c6957610c69610c08565b50601f01601f191660200190565b6000610c8a610c8584610c4f565b610c1e565b9050828152838383011115610c9e57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114610ccc57600080fd5b919050565b600080600060608486031215610ce657600080fd5b833567ffffffffffffffff80821115610cfe57600080fd5b818601915086601f830112610d1257600080fd5b610d2187833560208501610c77565b9450610d2f60208701610cb5565b93506040860135915080821115610d4557600080fd5b508401601f81018613610d5757600080fd5b610d6686823560208401610c77565b9150509250925092565b600060208284031215610d8257600080fd5b610d8b82610cb5565b9392505050565b600060208284031215610da457600080fd5b5051919050565b6020808252601290820152712737ba1030903a37b5b2b7103437b63232b960711b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b2d57610b2d610dd7565b600181811c90821680610e1457607f821691505b602082108103610e3457634e487b7160e01b600052602260045260246000fd5b50919050565b6000808354610e4881610e00565b60018281168015610e605760018114610e7557610ea4565b60ff1984168752821515830287019450610ea4565b8760005260208060002060005b85811015610e9b5781548a820152908401908201610e82565b50505082870194505b50929695505050505050565b828152604060208201526000610ec96040830184610b70565b949350505050565b602081526000610d8b6020830184610b70565b600060018201610ef657610ef6610dd7565b5060010190565b601f821115610f4757600081815260208120601f850160051c81016020861015610f245750805b601f850160051c820191505b81811015610f4357828155600101610f30565b5050505b505050565b815167ffffffffffffffff811115610f6657610f66610c08565b610f7a81610f748454610e00565b84610efd565b602080601f831160018114610faf5760008415610f975750858301515b600019600386901b1c1916600185901b178555610f43565b600085815260208120601f198616915b82811015610fde57888601518255948401946001909101908401610fbf565b5085821015610ffc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8381526001600160a01b038316602082015260606040820181905260009061103690830184610b70565b95945050505050565b60006020828403121561105157600080fd5b815167ffffffffffffffff81111561106857600080fd5b8201601f8101841361107957600080fd5b8051611087610c8582610c4f565b81815285602083850101111561109c57600080fd5b611036826020830160208601610b4c56fea26469706673582212201a471f5cf5494e6ff2e177f07b593c1cb75bc351769963683e471b5b0578689264736f6c63430008120033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80632821ff26116100665780632821ff261461011b5780636986e3291461012e578063b03401231461016f578063b31e1d4d14610182578063da35c6641461019557600080fd5b80630121b93f146100a3578063013cf08b146100b857806302a251a3146100e85780630d61b519146100ff5780631703a01814610112575b600080fd5b6100b66100b1366004610b33565b61019e565b005b6100cb6100c6366004610b33565b61049a565b6040516100df989796959493929190610b9c565b60405180910390f35b6100f160055481565b6040519081526020016100df565b6100b661010d366004610b33565b610607565b6100f160045481565b6100b6610129366004610cd1565b61082a565b61015761013c366004610d70565b6003602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100df565b600054610157906001600160a01b031681565b6100b6610190366004610d70565b610986565b6100f160015481565b600080546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156101e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020b9190610d92565b116102315760405162461bcd60e51b815260040161022890610dab565b60405180910390fd5b6000818152600260205260409020600481015442106102885760405162461bcd60e51b8152602060048201526013602482015272159bdd1a5b99c81c195c9a5bd908195b991959606a1b6044820152606401610228565b33600090815260078201602052604090205460ff16156102da5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b6044820152606401610228565b600080546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103479190610d92565b336000908152600360205260409020549091506001600160a01b031680156103e4576000546040516370a0823160e01b81526001600160a01b038381166004830152909116906370a0823190602401602060405180830381865afa1580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d79190610d92565b6103e19083610ded565b91505b600082116104265760405162461bcd60e51b815260206004820152600f60248201526e2737903b37ba34b733903837bbb2b960891b6044820152606401610228565b8183600301600082825461043a9190610ded565b9091555050336000818152600785016020908152604091829020805460ff19166001179055815192835282018690527f4d99b957a2bc29a30ebd96a7be8e68fe50a3c701db28a91436490b7d53870ca4910160405180910390a150505050565b600260208190526000918252604090912080546001820154928201805491936001600160a01b031692916104cd90610e00565b80601f01602080910402602001604051908101604052809291908181526020018280546104f990610e00565b80156105465780601f1061051b57610100808354040283529160200191610546565b820191906000526020600020905b81548152906001019060200180831161052957829003601f168201915b505050506003830154600484015460058501546006860180549596939592945060ff8216936101009092046001600160a01b03169261058490610e00565b80601f01602080910402602001604051908101604052809291908181526020018280546105b090610e00565b80156105fd5780601f106105d2576101008083540402835291602001916105fd565b820191906000526020600020905b8154815290600101906020018083116105e057829003601f168201915b5050505050905088565b600081815260026020526040902060048101544210156106695760405162461bcd60e51b815260206004820152601760248201527f566f74696e6720706572696f64206e6f7420656e6465640000000000000000006044820152606401610228565b600581015460ff16156106b15760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e48195e1958dd5d195960821b6044820152606401610228565b600454816003015410156106fa5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f75676820766f74657360801b6044820152606401610228565b60058101805460ff191660011790556040517f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f9061073b9084815260200190565b60405180910390a16000808260050160019054906101000a90046001600160a01b03166001600160a01b0316836006016040516107789190610e3a565b6000604051808303816000865af19150503d80600081146107b5576040519150601f19603f3d011682016040523d82523d6000602084013e6107ba565b606091505b5091509150816108245760006107cf82610ace565b90507ff46b9a37318f375b6612b0522f04ac289129cafb279d379fa487be62a147477c8582604051610802929190610eb0565b60405180910390a18060405162461bcd60e51b81526004016102289190610ed1565b50505050565b600080546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610873573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108979190610d92565b116108b45760405162461bcd60e51b815260040161022890610dab565b60018054600091826108c583610ee4565b9091555060008181526002602081905260409091208281556001810180546001600160a01b0319163317905591925081016109008682610f4c565b5060055461090e9042610ded565b6004820155600581018054610100600160a81b0319166101006001600160a01b03871602179055600681016109438482610f4c565b507f7585f467599d0f008985f231af99293be388626ac16ca59505c2f8f88969cd638233876040516109779392919061100c565b60405180910390a15050505050565b600080546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156109cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f39190610d92565b11610a105760405162461bcd60e51b815260040161022890610dab565b336001600160a01b03821603610a685760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f742064656c656761746520746f2073656c660000000000000000006044820152606401610228565b3360008181526003602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251938452908301527fa0ff2fa6909fe4ddd94349fc9d8e2932f3dfe666216f3cc2aa3a72f5a03b655e910160405180910390a150565b6060604482511015610b1357505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b60048201915081806020019051810190610b2d919061103f565b92915050565b600060208284031215610b4557600080fd5b5035919050565b60005b83811015610b67578181015183820152602001610b4f565b50506000910152565b60008151808452610b88816020860160208601610b4c565b601f01601f19169290920160200192915050565b8881526001600160a01b03888116602083015261010060408301819052600091610bc88483018b610b70565b915088606085015287608085015286151560a085015280861660c08501525082810360e0840152610bf98185610b70565b9b9a5050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610c4757610c47610c08565b604052919050565b600067ffffffffffffffff821115610c6957610c69610c08565b50601f01601f191660200190565b6000610c8a610c8584610c4f565b610c1e565b9050828152838383011115610c9e57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114610ccc57600080fd5b919050565b600080600060608486031215610ce657600080fd5b833567ffffffffffffffff80821115610cfe57600080fd5b818601915086601f830112610d1257600080fd5b610d2187833560208501610c77565b9450610d2f60208701610cb5565b93506040860135915080821115610d4557600080fd5b508401601f81018613610d5757600080fd5b610d6686823560208401610c77565b9150509250925092565b600060208284031215610d8257600080fd5b610d8b82610cb5565b9392505050565b600060208284031215610da457600080fd5b5051919050565b6020808252601290820152712737ba1030903a37b5b2b7103437b63232b960711b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610b2d57610b2d610dd7565b600181811c90821680610e1457607f821691505b602082108103610e3457634e487b7160e01b600052602260045260246000fd5b50919050565b6000808354610e4881610e00565b60018281168015610e605760018114610e7557610ea4565b60ff1984168752821515830287019450610ea4565b8760005260208060002060005b85811015610e9b5781548a820152908401908201610e82565b50505082870194505b50929695505050505050565b828152604060208201526000610ec96040830184610b70565b949350505050565b602081526000610d8b6020830184610b70565b600060018201610ef657610ef6610dd7565b5060010190565b601f821115610f4757600081815260208120601f850160051c81016020861015610f245750805b601f850160051c820191505b81811015610f4357828155600101610f30565b5050505b505050565b815167ffffffffffffffff811115610f6657610f66610c08565b610f7a81610f748454610e00565b84610efd565b602080601f831160018114610faf5760008415610f975750858301515b600019600386901b1c1916600185901b178555610f43565b600085815260208120601f198616915b82811015610fde57888601518255948401946001909101908401610fbf565b5085821015610ffc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8381526001600160a01b038316602082015260606040820181905260009061103690830184610b70565b95945050505050565b60006020828403121561105157600080fd5b815167ffffffffffffffff81111561106857600080fd5b8201601f8101841361107957600080fd5b8051611087610c8582610c4f565b81815285602083850101111561109c57600080fd5b611036826020830160208601610b4c56fea26469706673582212201a471f5cf5494e6ff2e177f07b593c1cb75bc351769963683e471b5b0578689264736f6c63430008120033","abi":[{"inputs":[{"internalType":"contract IERC20","name":"_votingToken","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"proposalId","type":"uint256"},{"indexed":false,"internalType":"string","name":"errorMessage","type":"string"}],"name":"ExecutionFailure","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"proposalId","type":"uint256"},{"indexed":false,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"string","name":"description","type":"string"}],"name":"ProposalCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"proposalId","type":"uint256"}],"name":"ProposalExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"delegator","type":"address"},{"indexed":false,"internalType":"address","name":"delegatee","type":"address"}],"name":"VoteDelegated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"voter","type":"address"},{"indexed":false,"internalType":"uint256","name":"proposalId","type":"uint256"}],"name":"Voted","type":"event"},{"inputs":[{"internalType":"string","name":"_description","type":"string"},{"internalType":"address","name":"_targetContract","type":"address"},{"internalType":"bytes","name":"_callData","type":"bytes"}],"name":"createProposal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_delegatee","type":"address"}],"name":"delegateVote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"}],"name":"executeProposal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"proposalCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"proposals","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"creator","type":"address"},{"internalType":"string","name":"description","type":"string"},{"internalType":"uint256","name":"voteCount","type":"uint256"},{"internalType":"uint256","name":"voteEndTime","type":"uint256"},{"internalType":"bool","name":"executed","type":"bool"},{"internalType":"address","name":"targetContract","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"quorum","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"}],"name":"vote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"voteDelegation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"votingPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"votingToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}